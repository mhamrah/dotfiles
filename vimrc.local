set nocursorline " don't highlight current line
set relativenumber

" keyboard shortcuts
inoremap jj <ESC>

"use ; as the command leader
nnoremap ; :
vnoremap ; :

set showmode "show the mode you're in

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

set showmatch
set hlsearch
set autoread

set autowrite
set autowriteall
set nowritebackup

"disable backup and swaps
set nobackup
set noswapfile

"Store temporary files in a central spot
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

if has("gui_running")
  set noballooneval
  set go-=T
endif

set title
set visualbell
set noerrorbells

set history=300
set undolevels=300

"split and move
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>j

"close window
map <leader>qw <C-w>q<cr>

"clear current search
nnoremap <leader>n :noh<cr>

if !has('gui_running')
  set term=screen-256color
endif

" gui settings
if (&t_Co == 256 || has('gui_running'))
  colorscheme zenburn
endif

autocmd! bufwritepost .vimrc source ~/.vimrc
autocmd! bufwritepost .vimrc.local source ~/.vimrc

set laststatus=2                  " Show the status line all the time

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P
let g:nerdtree_tabs_open_on_gui_startup=0

"auto save when losing focus
autocmd FocusLost * :wa

set clipboard=unnamed

"TODO: syntack?

autocmd FileType c,cpp,java,php,ruby,python,scala,javascript,json autocmd BufWritePre <buffer> :call whitespace#strip_trailing()

autocmd BufLeave,FocusLost,VimResized * silent! wall

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

"Scalariform"
au BufEnter *.scala setl formatprg=java\ -jar\ ~/.bin/scalariform.jar\ +alignParameters\ +alignSingleLineCaseStatements\ +compactControlReadability\ +doubleIndentClassDeclaration\ +indentLocalDefs\ +preserveDanglingCloseParenthesis\ --stdin\ --stdout

au BufRead *.txt,*.md,*.html setlocal spell

"let g:neocomplcache_enable_at_startup = 1
"noremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

function! CleverTab()
  if pumvisible()
    return "\<C-N>"
  endif
  if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
    return "\<Tab>"
  elseif exists('&omnifunc') && &omnifunc != ''
    return "\<C-X>\<C-O>"
  else
    return "\<C-N>"
  endif
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>
"set omnifunc=syntaxcomplete#Complete
"au FileType ruby,eruby setl ofu=rubycomplete#Complete
"au FileType html,xhtml setl ofu=htmlcomplete#CompleteTags
"au FileType css setl ofu=csscomplete#CompleteCSS
"au FileType scala setl ofu=scala
"

"ignore for ctrlp, etc
set wildignore+=*.class,*.swp,*.zip,*/target/*

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
" from http://robots.thoughtbot.com/faster-grepping-in-vim/
"command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
"nnoremap \ :Ag<SPACE>

